generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuario {
  idUsuario   Int      @id @default(autoincrement())
  nome        String   @db.VarChar(45)
  email       String   @unique(map: "email_UNIQUE") @db.VarChar(45)
  ativo       Boolean  @default(true)
  firebaseId  String   @unique
  criado_em   DateTime @default(now()) @db.DateTime(0)
  editado_em  DateTime @updatedAt @db.DateTime(0)

  logEvento   logEvento[]   @relation("logUsuario")
}

model empresa {
  idEmpresa  Int      @id @default(autoincrement())
  nome       String
  ativo      Boolean  @default(true)
  unidades   unidade[]
}

model unidade {
  idUnidade           Int                 @id @default(autoincrement())
  fkEmpresaId         Int
  nomeFantasia        String
  razaoSocial         String
  tipoDocumento       TipoDocumento
  documento           String
  inscricaoEstadual   String?
  endereco            String
  numero              String
  complemento         String?
  bairro              String
  cidade              String
  uf                  String
  cep                 String
  ativo               Boolean             @default(true)
  observacao          String?
  retemIss            Boolean             @default(false)

  empresa             empresa?            @relation(fields: [fkEmpresaId], references: [idEmpresa], onDelete: Cascade)
  contatos            unidadeContato[]
  contratos           contrato[]
}

model contato {
  idContato       Int               @id @default(autoincrement())
  nome            String
  email           String?
  emailSecundario String?
  telefoneFixo    String?
  telefoneWpp     String?

  unidades        unidadeContato[]
}

model unidadeContato {
  id              Int      @id @default(autoincrement())
  fkUnidadeId     Int
  fkContatoId     Int

  unidade         unidade  @relation(fields: [fkUnidadeId], references: [idUnidade], onDelete: Cascade)
  contato         contato  @relation(fields: [fkContatoId], references: [idContato], onDelete: Cascade)

  @@unique([fkUnidadeId, fkContatoId])
}

model contrato {
  idContrato       Int              @id @default(autoincrement())
  fkUnidadeId      Int
  dataInicio       DateTime
  dataFim          DateTime
  parcelas         Int
  valorBase        Decimal          @db.Decimal(10, 2)
  porVida          Boolean
  vidas            Int?
  recorrente       Boolean
  status           StatusContrato
  faturadoPor      FaturadoPor
  esocial          Boolean?
  laudos           Boolean?
  observacao       String?
  diaVencimento    String?

  unidade          unidade          @relation(fields: [fkUnidadeId], references: [idUnidade], onDelete: Cascade)
  projecoes        projecao[]
  faturamentos     faturamento[]
}

model projecao {
  idProjecao       Int             @id @default(autoincrement())
  fkContratoId     Int
  competencia      String
  valorPrevisto    Decimal         @db.Decimal(10, 2)
  status           StatusProjecao
  vidas            Int?

  contrato         contrato        @relation(fields: [fkContratoId], references: [idContrato], onDelete: Cascade)
  faturamentos     faturamento[]
}

model faturamento {
  idFaturamento               Int                     @id @default(autoincrement())
  fkContratoId                Int
  fkProjecaoId                Int?
  fkCompetenciaFinanceiraId   Int?
  competencia                 String
  valorBase                   Decimal                 @db.Decimal(10, 2)
  impostoPorcentagem          Decimal                 @db.Decimal(10, 2)
  impostoValor                Decimal                 @db.Decimal(10, 2)
  valorTotal                  Decimal                 @db.Decimal(10, 2)
  status                      StatusFaturamento
  vidas                       Int?
  pagoEm                      DateTime?
  competenciaPagamento        String?
  numeroNota                  String?

  contrato                    contrato                @relation(fields: [fkContratoId], references: [idContrato], onDelete: Cascade)
  projecao                    projecao?               @relation(fields: [fkProjecaoId], references: [idProjecao])
  competenciaFinanceira       competenciaFinanceira?  @relation(fields: [fkCompetenciaFinanceiraId], references: [idCompetenciaFinanceira], onDelete: SetNull)
}

model competenciaFinanceira {
  idCompetenciaFinanceira  Int            @id @default(autoincrement())
  competencia              String         @unique
  imposto                  Decimal        @db.Decimal(10, 2)
  ipca                     Decimal        @db.Decimal(10, 2)
  iss                      Decimal        @db.Decimal(10, 2)

  faturamentos             faturamento[]
}

model fornecedor {
  idFornecedor  Int           @id @default(autoincrement())
  tipoPessoa    TipoPessoa
  tipoDocumento TipoDocumento 
  documento     String?       @unique
  nome          String
  observacao    String?
  ativo         Boolean       @default(true)

  contasPagar   contaPagar[]
}

model planoContaCategoria {
  idPlanoContaCategoria    Int                      @id @default(autoincrement())
  nome                     String
  ativo                    Boolean                  @default(true)

  subcategorias  planoContaSubcategoria[]
}

model planoContaSubcategoria {
  idPlanoContaSubCategoria   Int                 @id @default(autoincrement())
  nome                       String
  fkPlanoContaCategoria      Int
  ativo                      Boolean             @default(true)

  contasPagar                contaPagar[]

  categoria                  planoContaCategoria @relation(fields: [fkPlanoContaCategoria], references: [idPlanoContaCategoria])
}

model banco {
  idBanco       Int           @id @default(autoincrement())
  nome          String
  ativo         Boolean       @default(true)

  contasPagar   contaPagar[]
}

model contaPagar {
  idContaPagar                Int                    @id @default(autoincrement())
  dataEmissao                 DateTime
  numeroDocumento             String
  fkFornecedorId              Int
  tipoDocumentoConta          TipoDocumentoConta
  fkPlanoContaSubCategoriaId  Int
  fkBancoId                   Int
  descricao                   String?
  valorTotal                  Decimal                @db.Decimal(10, 2)
  parcelas                    Int
  vencimento                  DateTime               
  intervalo                   Int                    
  recorrente                  Boolean                @default(false)
  status                      StatusParcela          @default(ABERTA)

  fornecedor                  fornecedor             @relation(fields: [fkFornecedorId], references: [idFornecedor])
  planoConta                  planoContaSubcategoria @relation(fields: [fkPlanoContaSubCategoriaId], references: [idPlanoContaSubCategoria])
  banco                       banco                  @relation(fields: [fkBancoId], references: [idBanco])

  parcelasConta               parcelaContaPagar[]
}

model parcelaContaPagar {
  idParcela        Int           @id @default(autoincrement())
  fkContaPagarId   Int
  numero           Int
  vencimento       DateTime
  valor            Decimal       @db.Decimal(10, 2)
  status           StatusParcela @default(ABERTA)
  pagoEm           DateTime?

  contaPagar       contaPagar    @relation(fields: [fkContaPagarId], references: [idContaPagar])
}

model logEvento {
  idLogEvento  Int      @id @default(autoincrement())
  fkUsuarioId  Int
  tipo         String
  descricao    String?  @db.Text
  entidade     String?
  entidade_id  Int?
  dados_antes  Json?
  dados_depois Json?
  criado_em    DateTime @default(now()) @db.DateTime(0)

  usuario usuario @relation("logUsuario", fields: [fkUsuarioId], references: [idUsuario], map: "fk_logEvento_fkUsuarioId")
}

enum TipoDocumento {
  CNPJ
  CAEPF
  CPF
}

enum StatusContrato {
  ATIVO
  ENCERRADO
  CANCELADO
}

enum FaturadoPor {
  MEDWORK
  EDELFE
}

enum StatusProjecao {
  PENDENTE
  FATURADO
}

enum StatusFaturamento {
  ABERTA
  PAGA
  ATRASADA
}

enum TipoDocumentoConta {
  BOLETO
  DEBITO_AUTOMATICO
  FATURA
  NF
  PIX
}

enum StatusParcela {
  ABERTA
  PAGA
  ATRASADA
}

enum TipoPessoa {
  CLIENTE
  FORNECEDOR
  CLIENTE_FORNECEDOR
}