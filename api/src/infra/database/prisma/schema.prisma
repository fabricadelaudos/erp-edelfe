generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuario {
  idUsuario   Int      @id @default(autoincrement())
  nome        String   @db.VarChar(45)
  email       String   @unique(map: "email_UNIQUE") @db.VarChar(45)
  ativo       Int      @default(1) @db.TinyInt
  firebaseId  String   @unique
  criado_em   DateTime @default(now()) @db.DateTime(0)
  editado_em  DateTime @updatedAt @db.DateTime(0)

  logEvento   logEvento[]   @relation("logUsuario")
}

model empresa {
  idEmpresa  Int      @id @default(autoincrement())
  nome       String
  ativo      Boolean  @default(true)
  unidades   unidade[]
}

model unidade {
  idUnidade           Int             @id @default(autoincrement())
  fkEmpresaId         Int
  nomeFantasia        String
  razaoSocial         String
  tipoDocumento       TipoDocumento
  documento           String
  inscricaoEstadual   String?
  endereco            String
  numero              String
  complemento         String?
  bairro              String
  cidade              String
  uf                  String
  cep                 String
  ativo               Boolean         @default(true)
  observacao          String?
  retemIss            Boolean         @default(false)

  empresa             empresa?        @relation(fields: [fkEmpresaId], references: [idEmpresa], onDelete: Cascade)
  contato             contato[]
  contratos           contrato[]
}

model contato {
  idContato       Int    @id @default(autoincrement())
  fkUnidadeId     Int    @unique
  nome            String
  email           String?
  emailSecundario String?
  telefoneFixo    String?
  telefoneWpp     String?

  unidade         unidade @relation(fields: [fkUnidadeId], references: [idUnidade], onDelete: Cascade)
}

model contrato {
  idContrato       Int              @id @default(autoincrement())
  fkUnidadeId      Int
  dataInicio       DateTime
  dataFim          DateTime
  parcelas         Int
  valorBase        Decimal          @db.Decimal(10, 2)
  porVida          Boolean
  recorrente       Boolean
  status           StatusContrato
  faturadoPor      FaturadoPor
  esocial          Boolean?
  laudos           Boolean?
  observacao       String?
  diaVencimento    String?

  unidade          unidade          @relation(fields: [fkUnidadeId], references: [idUnidade], onDelete: Cascade)
  projecoes        projecao[]
  faturamentos     faturamento[]
}

model projecao {
  idProjecao       Int             @id @default(autoincrement())
  fkContratoId     Int
  competencia      String
  valorPrevisto    Decimal         @db.Decimal(10, 2)
  status           StatusProjecao
  vidas            Int?

  contrato         contrato        @relation(fields: [fkContratoId], references: [idContrato], onDelete: Cascade)
  faturamentos     faturamento[]
}

model faturamento {
  idFaturamento             Int                 @id @default(autoincrement())
  fkContratoId              Int
  fkProjecaoId              Int?
  fkCompetenciaFinanceiraId Int
  competencia               String
  valorBase                 Decimal             @db.Decimal(10, 2)
  impostoPorcentagem        Decimal             @db.Decimal(10, 2)
  impostoValor              Decimal             @db.Decimal(10, 2)
  valorTotal                Decimal             @db.Decimal(10, 2)
  status                    StatusFaturamento
  vidas                     Int?
  pagoEm                    DateTime?
  competenciaPagamento      String?
  numeroNota                String?

  contrato                  contrato            @relation(fields: [fkContratoId], references: [idContrato], onDelete: Cascade)
  projecao                  projecao?           @relation(fields: [fkProjecaoId], references: [idProjecao])
  competenciaFinanceira     competenciaFinanceira @relation(fields: [fkCompetenciaFinanceiraId], references: [idCompetenciaFinanceira])
}

model competenciaFinanceira {
  idCompetenciaFinanceira  Int            @id @default(autoincrement())
  competencia              String         @unique
  imposto                  Decimal        @db.Decimal(10, 2)
  ipca                     Decimal        @db.Decimal(10, 2)
  iss                      Decimal        @db.Decimal(10, 2)

  faturamentos             faturamento[]
}

model despesa {
  idDespesa              Int                 @id @default(autoincrement())
  fkDespesaRecorrenteId  Int?
  fkDespesaCategoriaId   Int?
  descricao              String
  competencia            String
  vencimento             DateTime
  valor                  Decimal              @db.Decimal(10, 2)
  status                 StatusDespesa
  tipoPagamento          TipoPagamento
  parcelaAtual           Int?
  parcelaTotal           Int?
  pagoEm                 DateTime?

  despesaRecorrente      despesaRecorrente?   @relation(fields: [fkDespesaRecorrenteId], references: [idDespesaRecorrente], onDelete: SetNull)
  categoria              despesaCategoria?    @relation(fields: [fkDespesaCategoriaId], references: [idDespesaCategoria], onDelete: SetNull)
}

model despesaRecorrente {
  idDespesaRecorrente Int        @id @default(autoincrement())
  descricao           String
  valor               Decimal    @db.Decimal(10, 2)
  vencimento          Int
  dataInicio          DateTime
  dataFim             DateTime?
  ativa               Boolean     @default(true)

  despesas            despesa[]
}

model despesaCategoria{
  idDespesaCategoria  Int         @id @default(autoincrement())
  nome                String
  ativo               Int

  despesas            despesa[]
}

model logEvento {
  idLogEvento  Int      @id @default(autoincrement())
  fkUsuarioId  Int
  tipo         String
  descricao    String?  @db.Text
  entidade     String?
  entidade_id  Int?
  dados_antes  Json?
  dados_depois Json?
  criado_em    DateTime @default(now()) @db.DateTime(0)

  usuario usuario @relation("logUsuario", fields: [fkUsuarioId], references: [idUsuario], map: "fk_logEvento_fkUsuarioId")
}

enum TipoDocumento {
  CNPJ
  CAEPF
}

enum StatusContrato {
  ATIVO
  ENCERRADO
  CANCELADO
}

enum FaturadoPor {
  MEDWORK
  EDELFE
}

enum StatusProjecao {
  PENDENTE
  FATURADO
}

enum StatusFaturamento {
  ABERTA
  PAGA
  ATRASADA
}

enum StatusDespesa {
  ABERTA
  PAGA
}

enum TipoPagamento {
  AVISTA
  APRAZO
  RECORRENTE
}